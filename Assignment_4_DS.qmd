---
title: "Assignment 4 DS"
author: "Marius & Espen"
format: html
editor: visual
language: nb.yaml 
---

```{r}
#| label: setup
#| message: false
library(tidyverse)
library(readxl)
library(restatapi)
library(DescTools)
library(ggrepel)
library(flextable)
library(modelr)
library(plm)
library(broom)
library(sandwich)
```

```{r}
# xml skal ha mer detaljert info
# toc_xml <- get_eurostat_toc()
2
# tekstversjonen har trolig nok info for vårt formål
toc_txt <- get_eurostat_toc(mode = "txt")
```

```{r}
gdp_tabs <- toc_txt |>
# Regex AND external to regex
filter(
str_detect(
string = title,
# For å matche både små og store bokstaver
pattern = '[Gg][Dd][Pp]'
# AND vha. &
) &
str_detect(
string = title,
# For å matche både små og store bokstaver og
# space eller ikke før 3
pattern = '[Nn][Uu][Tt][Ss]\\s*3'
)
) |>
select(title, code)
```

Vi finner fire tabeller listet i toc_txt.

```{r}
gdp_tabs |>
select(title, code) |>
flextable() |>
width(1, width = 3.5) |>
width(2, width = 1.5)

```

Vi laster så ned «Data Structure Definition (DSD)» for tabellen med code nama_10r_3gdp

```{r}
# description nama_10r_3gdp
dsd_gdp <- get_eurostat_dsd("nama_10r_3gdp")
dsd_gdp |>
head(n = 15) |>
flextable() |>
width(1, width = 1) |>
width(2, width = 1) |>
width(3, width = 3.5)
```

Utfra kodene i dsd_gdp kan vi da formulere følgende spørring mot Eurostat:

```{r}
#| eval: false
# ag_comment: Satt eval til false ellers kjører samme kode to ganger
# Gross domestic product (GDP) at current market prices by NUTS 3 regions
# id: nama_10r_3gdp
nama_10r_3gdp <- get_eurostat_data(
id = "nama_10r_3popgdp",
filters = list(
geo = c("AT", "DE", "DK", "FR", "EL", "ES",
"IT", "NL", "BE", "IE", "PL", "PT", "NO", "SE", "FI", "CH"),
nuts_level = "3",
unit = "MIO_PPS_EU27_2020"
),
exact_match = FALSE,
date_filter = 2000:2020,
stringsAsFactors = FALSE
) |>
mutate(
gdp = 1000000 * values
) |>
select(-c(unit, values)) |>
# Vil bare ha NUTS 3 nivå (5 karakterer). Vil aggregere selv til NUTS2,
# NUTS1 og NUTSc
filter(str_length(geo) == 5)
```

Oppgave 1)

```{r}
# id: nama_10r_3gdp
nama_10r_3gdp <- get_eurostat_data(
id = "nama_10r_3gdp",
filters = list(
geo = c("AT", "DE", "DK", "FR", "EL", "ES",
"IT", "NL", "BE", "IE", "PL", "PT", "NO", "SE", "FI", "CH"),
nuts_level = "3",
unit = "MIO_PPS_EU27_2020"
),
exact_match = FALSE,
date_filter = 2000:2020,
stringsAsFactors = FALSE
) |>
mutate(
gdp = 1000000 * values
) |>
select(-c(unit, values)) |>
# Vil bare ha NUTS 3 nivå (5 karakterer). Vil aggregere selv til NUTS2,
# NUTS1 og NUTSc
filter(str_length(geo) == 5)
```

Oppgave 2)

i\.
Fant koden nama_10r_3popgdp for tabellen med forklarende tekst «Average annual population to calculate regional GDP data (thousand persons) by NUTS 3 regions».

ii\.

```{r}
# ndefineddescription nama_10r_3popgdp
dsd_popgdp <- get_eurostat_dsd("nama_10r_3popgdp")
dsd_popgdp |>
head(n = 15) |>
flextable() |>
width(1, width = 1) |>
width(2, width = 1) |>
width(3, width = 3.5)
```

iii\.

```{r}
# id: nama_10r_3popgdp
nama_10r_3popgdp <- get_eurostat_data(
id = "nama_10r_3popgdp",
filters = list(
geo = c("AT", "DE", "DK", "FR", "EL", "ES",
"IT", "NL", "BE", "IE", "PL", "PT", "NO", "SE", "FI", "CH"),
nuts_level = "3",
unit = "THS"
),
exact_match = FALSE,
date_filter = 2000:2020,
stringsAsFactors = FALSE
) |> mutate(
pop.x = 1000 * values
) |>
select(-c(unit, values)) |>
# Vil bare ha NUTS 3 nivå (5 karakterer). Vil aggregere selv til NUTS2,
# NUTS1 og NUTSc
filter(str_length(geo) == 5)
```

Oppgave 3)

```{r}
# description demo_r_pjanaggr3
   dsd_pop <- get_eurostat_dsd("demo_r_pjanaggr3")
  dsd_pop |>
  head(n = 15) |>
  flextable()  |>
  width(1, width = 1) |>
  width(2, width = 1) |>
  width(3, width = 3.5)
```

```{r}
demo_r_pjanaggr3 <- get_eurostat_data(
id = "demo_r_pjanaggr3",
filters = list(
geo = c("AT", "DE", "DK", "FR", "EL", "ES",
"IT", "NL", "BE", "IE", "PL", "PT", "NO", "SE", "FI", "CH"),
nuts_level = "3",
unit = "NR", sex = "T", age = "TOTAL"
),
exact_match = FALSE,
date_filter = 2000:2020,
stringsAsFactors = FALSE
) |>
select(-c(unit, sex, age)) |> select(geo, time, pop.y = values) |>
# Vil bare ha NUTS 3 nivå (5 karakterer). Vil aggregere selv til NUTS2,
# NUTS1 og NUTSc
filter(str_length(geo) == 5)
```

Oppgave 4)

```{r}
# Identifiser NUTS3-soner som mangler i nama_10r_3gdp
nuts3_missing_in_demo_r_pjanaggr3 <- setdiff(
  nama_10r_3popgdp$geo, 
  demo_r_pjanaggr3$geo
)

# Vis resultatet
print(nuts3_missing_in_demo_r_pjanaggr3)
```

Oppgave 5)

```{r}
nuts3_missing_in_nama_10r_3gdp <- setdiff(
  demo_r_pjanaggr3$geo,
  nama_10r_3popgdp$geo
  
)

# Vis resultatet
print(nuts3_missing_in_nama_10r_3gdp)

```

Oppgave 6)

```{r}
# Gjenomfører en full_join
full_pop_nuts3 <- full_join(demo_r_pjanaggr3, nama_10r_3popgdp, by = c("geo", "time"))

# Viser de første radene av det kombinerte datasettet
head(full_pop_nuts3)
```

Oppgave 7)

```{r}
#Sjekker sonene i full_pop_nuts3 mot GDP Tabellen
Full_pop_nuts3_Against_GDP <- setdiff(
  full_pop_nuts3$geo,
  nama_10r_3popgdp$geo
  
)

# Vis resultatet
print(Full_pop_nuts3_Against_GDP)
```

Oppgave 8)

```{r}
#Sjekker sonene i gdp tabellen mot de vi har i full_pop_nuts3
GDP_against_full_pop_nuts3 <- setdiff(
  nama_10r_3gdp$geo, 
  full_pop_nuts3$geo
  
)

# Vis resultatet
print(GDP_against_full_pop_nuts3)
```

```{r}
full_pop_nuts3 <- full_pop_nuts3 |> 
  filter(
    !str_detect(
      str_sub(
        geo, start = 3, end = 5), "ZZZ$"
      )
    )
nama_10r_3gdp <- nama_10r_3gdp |> 
  filter(
    !str_detect(
      str_sub(
        geo, start = 3, end = 5), "ZZZ$"
      )
    )
```

oppgave 9)

```{r}
full_pop_nuts3 |>
filter(geo %in% c("NO053", "NO060", "NO061")) |>
filter(time %in% 2014:2020) |>
arrange(time, geo)
```

oppgave 10

```{r}
full_pop_nuts3 <- full_pop_nuts3 |>
mutate(
pop = ifelse(
test = is.na(pop.x) == TRUE,
yes = pop.y,
no = pop.x
)
) |>
select(-pop.x, -pop.y)

```

Oppgave 11

```{r}

full_pop_nuts3 <- full_pop_nuts3 |>
  mutate(
    pop = ifelse(pop == 0, NA, pop)
  )
```

Oppgave 12)

```{r}

eu_data <- left_join(
  nama_10r_3gdp, 
  full_pop_nuts3, 
  by = c("geo", "time"), 
  suffix = c("gdp", "pop")
  )

```

Dette er feil tall i forhold til Arnstein sitt som er 21159 og 4.
forsetter men usikker på om dette er rett.

```{r}
dim(eu_data)
```

```{r}
eu_data <- eu_data |>
mutate(
country = str_sub(geo, start = 1L, end = 2L)
)

```

```{r}
eu_data |>
distinct(geo, .keep_all = TRUE) |>
group_by(country) |>
summarise(Antall = n(), .groups = "drop")
```

```{r}
eu_data |>
summary()

```

OBS!!!
formelen under fjerner alle datasett, så ikke kjør denne før oppgave 12 ses på.

```{r}
#Endrer navn og rekkefølge på variabelen i eu_data vha. select().
eu_data <- eu_data |>
select(country, NUTS3 = geo, year = time, gdp, pop)
# Rydder opp
# Sletter alle objekt utenom eu_data
# don't use if you don't mean it
rm(list = setdiff(ls(), "eu_data"))

```

Oppgave 13)

```{r}
# Beregner GDP per capita
eu_data <- eu_data %>%
  mutate(gdp_per_capita = round(gdp / pop, 2))
```

```{r}
eu_data |>
select(gdp_per_capita) |>
summary()

```

Oppgave 14)

```{r}
# Legger til variabelen country_name basert på verdiene i "geo"
eu_data <- eu_data %>%
  mutate(
    country_name = case_when(
      country == "AT" ~ "Østerrike",
      country == "DE" ~ "Tyskland",
      country == "DK" ~ "Danmark",
      country == "FR" ~ "Frankrike",
      country == "EL" ~ "Hellas",
      country == "ES" ~ "Spania",
      country == "IT" ~ "Italia",
      country == "NL" ~ "Nederland",
      country == "BE" ~ "Belgia",
      country == "IE" ~ "Irland",
      country == "PL" ~ "Polen",
      country == "PT" ~ "Portugal",
      country == "NO" ~ "Norge",
      country == "SE" ~ "Sverige",
      country == "FI" ~ "Finland",
      country == "CH" ~ "Sveits",
      TRUE ~ as.character(country)  # Default: Behold country som country_name hvis ingen betingelser matcher
    )
  )

```

Oppgave 15)

```{r}
# Lager NUTS2, NUTS1, og NUTSc
eu_data <- eu_data %>%
  mutate(
    NUTS2 = str_sub(NUTS3, start = 1, end = 4),
    NUTS1 = str_sub(NUTS3, start = 1, end = 3),
    NUTSc = str_sub(NUTS3, start = 1, end = 2)
  ) %>%
  # Velger rekkefølge på landene
  select(country_name, country, year, NUTS3, NUTS2, NUTS1, NUTSc, gdp, pop, gdp_per_capita)
```

Oppgave 16)

```{r}
gini_NUTS2 <- eu_data %>%
  group_by(NUTS2, country_name, country, year) %>%
  summarise(
    gini_nuts2 = Gini(
      x = gdp_per_capita,
      weights = pop,
      na.rm = TRUE
    ),
    pop = sum(pop, na.rm = TRUE),
    gdp = sum(gdp, na.rm = TRUE),
    gdp_per_capita = gdp / pop,
    num_nuts3 = n(),
    .groups = "drop"
  ) %>%
  select(country_name, country, NUTS2, year, pop, gdp, gdp_per_capita, num_nuts3, gini_nuts2)
```

```{r}
gini_NUTS2 |>
summary() |>
print(width = 80)

```

```{r}
gini_NUTS2 |>
select(-country_name) |>
filter(gini_nuts2 < 0.001)

```

Oppgave 17)

```{r}
gini_NUTS1 <- eu_data %>%
  group_by(NUTS1, country_name, country, year) %>%
  summarise(
    gini_nuts1 = Gini(
      x = gdp_per_capita,
      weights = pop,
      na.rm = TRUE
    ),
    pop = sum(pop, na.rm = TRUE),
    gdp = sum(gdp, na.rm = TRUE),
    gdp_per_capita = gdp / pop,
    num_nuts2 = n_distinct(NUTS2),
    .groups = "drop"
  ) %>%
  select(country_name, country, NUTS1, year, pop, gdp, gdp_per_capita, num_nuts2, gini_nuts1)
```

```{r}
gini_NUTS1 |>
summary() |>
print(width = 80)

```

Oppgave 18)

```{r}
gini_NUTSc <- eu_data %>%
  group_by(NUTSc, country_name, country, year) %>%
  summarise(
    gini_nutsc = Gini(
      x = gdp_per_capita,
      weights = pop,
      na.rm = TRUE
    ),
    pop = sum(pop, na.rm = TRUE),
    gdp = sum(gdp, na.rm = TRUE),
    gdp_per_capita = gdp / pop,
    num_nuts1 = n_distinct(NUTS1),
    .groups = "drop"
  ) %>%
  select(country_name, country, NUTSc, year, pop, gdp, gdp_per_capita, num_nuts1, gini_nutsc)
```

```{r}
gini_NUTSc |>
summary() |>
print(width = 80)

```

Oppgave 19)

```{r}
gini_NUTS2_nest <- gini_NUTS2 |>
group_by(country_name, country) |>
nest(.key = "NUTS2_data") |>
ungroup()
```

Oppgave 20

```{r}
gini_NUTS1_nest <- gini_NUTS1 |>
group_by(country_name, country) |>
nest(.key = "NUTS1_data") |>
ungroup()
```

Oppgave 21

```{r}
gini_NUTSc_nest <- gini_NUTSc |>
group_by(country_name, country) |>
nest(.key = "NUTSc_data") |>
ungroup()
```

Oppgave 22

```{r}
# Grupper etter land og neste dataene på NUTS3-nivå
eu_data_nested <- eu_data %>%
  group_by(country_name, country) %>%
  nest() %>%
  rename(NUTS3_data = data) %>%
  ungroup()


gini_NUTS2_nest_unique <- gini_NUTS2_nest %>% 
  distinct(country_name, country, .keep_all = TRUE)
gini_NUTS1_nest_unique <- gini_NUTS1_nest %>% 
  distinct(country_name, country, .keep_all = TRUE)
gini_NUTSc_nest_unique <- gini_NUTSc_nest %>% 
  distinct(country_name, country, .keep_all = TRUE)

# Left join med de unike gini-datasettene
eu_data_nested <- eu_data_nested %>%
  left_join(gini_NUTS2_nest_unique, by = c("country_name", "country")) %>%
  left_join(gini_NUTS1_nest_unique, by = c("country_name", "country")) %>%
  left_join(gini_NUTSc_nest_unique, by = c("country_name", "country"))

# Fjerner gruppestrukturen og eventuelle duplikater
eu_data_nested <- eu_data_nested %>%
  ungroup() %>%
  distinct(country_name, country, .keep_all = TRUE)

# Sjekk strukturen til den endelige dataframen
print(eu_data_nested)
```

Oppgave 23

```{r}
# Jeg vil foreslå å heller ta data fra eu_data_nested. Trenger da ikke så mange
# objekter og det hele blir ryddigere og minsker risikoen for feil
#gini_NUTSc |>
eu_data_nested |> 
  unnest(NUTSc_data) |> 
  # ag_comment: fikser verdier horisontal akse ved å gjøre year
  # om fra integer til date. Merk at det bare gjøres i pipen her, så
  # year er fremdeles integer i eu_data_nested
  mutate(
    year = make_date(year)
  ) |> 
  ggplot(
    aes(
      x = year,
      y = gini_nutsc,
      group = country,
      color = country_name
    )
  ) + 
  geom_line() +
  labs(title = "Utvikling i Gini-koeffisient på nasjonsnivå",
       x = "År",
       y = "Gini-koeffisient")
```

Oppgave 24

```{r}
eu_data_nested |>
unnest(NUTSc_data) |>
filter(year == 2020) |>
select(country_name, gini_nutsc) |>
arrange(desc(gini_nutsc)) |>
flextable() |>
width(1, width = 1.5) |>
width(2, width = 1.5)
```

```{r}
eu_data_nested %>%
  unnest(NUTS2_data) %>%
  filter(country == "IE") %>%
  filter(year == 2000:2020) %>%
  select(year, NUTS2, gdp_per_capita, gini_nuts2) %>%
  arrange(desc(gini_nuts2)) %>%
  flextable() %>%
  width(1, width = 1.5) %>%
  width(2, width = 1.5)
```

Oppgave 25

```{r}
#| warning: false
eu_data_nested |> 
  filter(country == "ES") |> 
  unnest(NUTS2_data) |> 
  mutate(year = make_date(year)) |> 
  ggplot(
    aes(
      x = year,
      y = gini_nuts2,
      group = NUTS2,
      color = NUTS2,
    )
  ) +
  geom_line()
```

Oppgave 26

Spania

```{r}
eu_data_nested |> 
  filter(country == "ES") |> 
  unnest(NUTS1_data) |>
  mutate(year = make_date(year)) |> 
  ggplot(
    aes(
      x = year,
      y = gini_nuts1,
      group = NUTS1,
      color = NUTS1,
    )
  ) +
  geom_line() 
```

Oppgave 27

Det er en stor spredning i ulikheter mellom regionene i Spania.
Det viser en ujevn fordeling av verdiskapning i landet, og man kan se at rundt halvparten av regionene har en lav positiv utvikling (ulikheter øker i regionen), mens den andre halvparten har avtagende utvikling (mindre ulikheter).

Oppgave 28

```{r}
# Filtrer på Spania (ES) og NUTS2-nivå
eu_data_nested |> 
  unnest(NUTS2_data) |> 
  filter(country == "ES") |> 
  mutate(year = make_date(year)) |> 
    ggplot(
      aes(
        x = year,
        y = gdp_per_capita,
        group = NUTS2,
        color = NUTS2
      )
    ) +
    geom_line() +
  labs(title = "Utvikling i GDP per Capita på NUTS2-nivå i Spania",
       x = "År",
       y = "GDP per Capita") + 
  theme(legend.position = "bottom")
```

Oppgave 29

```{r}
#| warning: false
#| label: fig-de-nuts2
#| fig-cap: "Utviklingen i NUTS 2 gini-koeffisienter over årene 2000 til 2020 i Tyskland. Vi ser en svak negativ tendens, dvs reduksjon i forskjellen mellom NUTS 3 regioner. En NUTS 2 region skiller seg imidlertid klart ut fra dette generelle bildet."
eu_data_nested |> 
  filter(country == "DE") |> 
  unnest(NUTS2_data) |> 
  mutate(year = make_date(year)) |> 
  ggplot(
    aes(
      x = year,
      y = gini_nuts2,
      group = NUTS2
      # ag_comment. Droppe fargekoding
      #color = NUTS2,
    )
  ) +
  geom_line(show.legend = FALSE)
```

Oppgave 30

```{r}
#| warning: false
eu_data_nested |> 
  filter(country == "DE") |> 
  unnest(NUTS1_data) |> 
  mutate(year = make_date(year)) |> 
  ggplot(
    aes(
      x = year,
      y = gini_nuts1,
      group = NUTS1,
      color = NUTS1,
    )
  ) +
  geom_line() +
  theme(legend.position = "bottom")
```

Intervallene på NUTS1 nivå er lavere og det er mindre spredning.
Den avtagende utviklingen er relativt lik.

Oppgave 31

```{r}
#| warning: false
eu_data_nested |> 
  filter(country == "FR") |> 
  unnest(NUTS2_data) |> 
  mutate(year = make_date(year)) |> 
  ggplot(
    aes(
      x = year,
      y = gini_nuts2,
      group = NUTS2,
      color = NUTS2,
    )
  ) +
  geom_line() 
```

Oppgave 32

```{r}
eu_data_nested |> 
  filter(country == "FR") |> 
  unnest(NUTS1_data) |> 
  mutate(year = make_date(year)) |> 
  ggplot(
    aes(
      x = year,
      y = gini_nuts1,
      group = NUTS1,
      color = NUTS1,
    )
  ) +
  geom_line() 
```

Oppgave 33

Regionen som klart skiller seg ut fra resten er regionen er FR1, hvor Paris (FR101) befinner seg.
De store ulikhetene tilsier at Paris står for store deler av FR1 sin BNP i forhold til resten av regionen, og dette skaper høy ulikheter i regionen.

Oppgave 34

```{r}
eu_data_nested |> 
  filter(country == "FR") |> 
  unnest(NUTS3_data) |> 
  mutate(year = make_date(year)) |> 
  filter(NUTS1 == "FR1") |> 
  ggplot(
    aes(
      x = year,
      y = gdp_per_capita,
      group = NUTS3,
      color = NUTS3,
    )
  ) +
  geom_line() 
```

Oppgave 35

Her ser vi at det vi anntok i oppgave 33 stemmer, FR101 er Paris og denne skiller seg klart ut fra resten, sammen med en annen region.

Oppgave 36

```{r}
NUTS2_diff <- eu_data_nested |>
unnest(NUTS2_data) |>
mutate(
# Når vi tar diff får vi en obs. mindre. Legger derfor inn en NA først
# i vektoren
diff_gdp_per_capita = c(NA, diff(gdp_per_capita)),
diff_gini_nuts2 = c(NA, diff(gini_nuts2))
) |>
select(country_name, country, NUTS2, year, diff_gdp_per_capita, diff_gini_nuts2) %>%
# Fjerner obs. der vi har NA
filter(complete.cases(.)) |>
group_by(country_name, country, NUTS2) |>
nest(.key = "NUTS2_diff")
```

Oppgave 37

```{r}
# Bruk modellen diff_gini_nuts2 ~ diff_gdp_per_capita på hver NUTS2-region
NUTS2_diff <- NUTS2_diff %>%
  mutate(modell = map(NUTS2_diff, ~ lm(diff_gini_nuts2 ~ diff_gdp_per_capita, data = .)))
```

Oppgave 38

```{r}
NUTS2_diff <- NUTS2_diff |>
group_by(country_name, country, NUTS2) |>
mutate(
mod_coeff = map_df(
.x = modell,
.f = coef
)
)
```

Oppgave 39

```{r}
NUTS2_diff <- NUTS2_diff |>
group_by(country_name, country, NUTS2) |>
mutate(
mod_sum = map_df(
.x = modell,
.f = glance
)
)
```

Oppgave 40

```{r}
NUTS2_diff$mod_coeff |>
ggplot() +
geom_density(mapping = aes(x = diff_gdp_per_capita), adjust = 0.6) +
geom_vline(mapping = aes(xintercept = mean(diff_gdp_per_capita, na.rm = TRUE)),
colour = "gray60",
linetype = "dashed")
```

Oppgave 41

```{r}
# Antall positive regresjonskoeffisienter
antall_positive_koef <- sum(NUTS2_diff$modell %>% map_dbl(~ coef(.)["diff_gdp_per_capita"] > 0))

cat("Antall positive regresjonskoeffisienter for diff_gdp_per_capita:", antall_positive_koef, "\n")
```

Oppgave 42

```{r}
# Mean av regresjonskoeffisientene for diff_gdp_per_capita
gjennomsnitt_koef <- mean(NUTS2_diff$mod_coeff$diff_gdp_per_capita)
print(gjennomsnitt_koef)
```

Oppgave 43

```{r}
t.test(NUTS2_diff$mod_coeff$diff_gdp_per_capita, y = NULL,
       alternative = ("greater"),
       mu = 0, paired = FALSE, var.equal = FALSE,
       conf.level = 0.95)
```

P-verdien er 0.004755, som betyr at den er signifikant på alle nivåer (10%, 5% og 1%).
Vi kan dermed si at koeffisienten er siginifikant større enn 0.

Oppgave 44

```{r}
pdata <- eu_data_nested %>%
  unnest(NUTS2_data) %>%
  mutate(
    diff_gdp_per_capita = c(NA, diff(gdp_per_capita)),
    diff_gini_nuts2 = c(NA, diff(gini_nuts2))
  ) %>%
  select(country_name, country, NUTS2, year, diff_gdp_per_capita, diff_gini_nuts2) %>%
  filter(!is.na(diff_gdp_per_capita))  # Fjern rader med NA-verdier

# Utfør panelregresjon
p_mod <- plm(diff_gini_nuts2 ~ diff_gdp_per_capita, data = pdata, index = c("NUTS2", "year"), model = "pooling")

```

Oppgave 45

```{r}
summary(p_mod)
```

Panelet over viser sammenhengen mellom endringer i BNP per innbygger endringer i Gini-koeffisienten.
Resultatene viser at økonomisk vekst (diff_gdp_per_capita), har en signifikant positiv sammenheng med endringer i Gini-koeffisienten.
Koeffisienten for GDPer tilnærmet lik null og p-verdien er lav, og tyder på at økt økonomisk aktivitet har en sammenheng med økninger i inntektsulikheter.
Modellen forklarer 14.17% av variansen i Gini-koeffisienten.

Oppgave 46

```{r}
summary(p_mod, vcov = function(x) vcovHC(x, method = "white2"))
```

Når man benytter vcovHC og lignende, benytter man heteroskadisitisk robuste kovarianser for å forhindre heteroskedastisitet.
